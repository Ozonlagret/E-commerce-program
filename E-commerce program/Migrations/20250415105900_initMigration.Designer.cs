// <auto-generated />
using System;
using E_commerce_program.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_commerce_program.Migrations
{
    [DbContext(typeof(ECommerceProgramContext))]
    [Migration("20250415105900_initMigration")]
    partial class initMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_commerce_program.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Elektronik och tekniska produkter",
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Produkter för hemmet och köket",
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Kläder och accessoarer",
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Sportutrustning och träningsprodukter",
                            Name = "Sports"
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Böcker och litteratur",
                            Name = "Books"
                        });
                });

            modelBuilder.Entity("E_commerce_program.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Storgatan 1, Stockholm",
                            Email = "anders@example.com",
                            Name = "Anders Svensson",
                            Phone = "070-111-2233"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Kungsgatan 15, Göteborg",
                            Email = "emma@example.com",
                            Name = "Emma Johansson",
                            Phone = "073-222-3344"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Drottninggatan 8, Malmö",
                            Email = "lars@example.com",
                            Name = "Lars Nilsson",
                            Phone = "076-333-4455"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "Sveavägen 22, Uppsala",
                            Email = "sofia@example.com",
                            Name = "Sofia Lindgren",
                            Phone = "072-444-5566"
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "Järntorget 5, Göteborg",
                            Email = "peter@example.com",
                            Name = "Peter Karlsson",
                            Phone = "070-555-6677"
                        });
                });

            modelBuilder.Entity("E_commerce_program.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Levererad",
                            TotalAmount = 11999.0
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 2,
                            OrderDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Levererad ",
                            TotalAmount = 9798.0
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = 3,
                            OrderDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Behandlas",
                            TotalAmount = 18999.0
                        },
                        new
                        {
                            OrderId = 4,
                            CustomerId = 4,
                            OrderDate = new DateTime(2025, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Levererad",
                            TotalAmount = 3499.0
                        },
                        new
                        {
                            OrderId = 5,
                            CustomerId = 5,
                            OrderDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Skickad",
                            TotalAmount = 16994.0
                        },
                        new
                        {
                            OrderId = 6,
                            CustomerId = 1,
                            OrderDate = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Levererad",
                            TotalAmount = 899.0
                        },
                        new
                        {
                            OrderId = 7,
                            CustomerId = 3,
                            OrderDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Levererad",
                            TotalAmount = 2498.0
                        },
                        new
                        {
                            OrderId = 8,
                            CustomerId = 2,
                            OrderDate = new DateTime(2025, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Skickad",
                            TotalAmount = 1598.0
                        },
                        new
                        {
                            OrderId = 9,
                            CustomerId = 4,
                            OrderDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Behandlas",
                            TotalAmount = 5794.0
                        },
                        new
                        {
                            OrderId = 10,
                            CustomerId = 5,
                            OrderDate = new DateTime(2025, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Behandlas",
                            TotalAmount = 1299.0
                        });
                });

            modelBuilder.Entity("E_commerce_program.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 11999.0
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 2,
                            ProductId = 3,
                            Quantity = 2,
                            UnitPrice = 3499.0
                        },
                        new
                        {
                            OrderDetailId = 3,
                            OrderId = 2,
                            ProductId = 13,
                            Quantity = 3,
                            UnitPrice = 899.0
                        },
                        new
                        {
                            OrderDetailId = 4,
                            OrderId = 3,
                            ProductId = 11,
                            Quantity = 1,
                            UnitPrice = 18999.0
                        },
                        new
                        {
                            OrderDetailId = 5,
                            OrderId = 4,
                            ProductId = 3,
                            Quantity = 1,
                            UnitPrice = 3499.0
                        },
                        new
                        {
                            OrderDetailId = 6,
                            OrderId = 5,
                            ProductId = 4,
                            Quantity = 1,
                            UnitPrice = 12499.0
                        },
                        new
                        {
                            OrderDetailId = 7,
                            OrderId = 5,
                            ProductId = 5,
                            Quantity = 1,
                            UnitPrice = 4495.0
                        },
                        new
                        {
                            OrderDetailId = 8,
                            OrderId = 6,
                            ProductId = 13,
                            Quantity = 1,
                            UnitPrice = 899.0
                        },
                        new
                        {
                            OrderDetailId = 9,
                            OrderId = 7,
                            ProductId = 8,
                            Quantity = 1,
                            UnitPrice = 1499.0
                        },
                        new
                        {
                            OrderDetailId = 10,
                            OrderId = 7,
                            ProductId = 9,
                            Quantity = 3,
                            UnitPrice = 349.0
                        },
                        new
                        {
                            OrderDetailId = 11,
                            OrderId = 8,
                            ProductId = 7,
                            Quantity = 1,
                            UnitPrice = 1999.0
                        },
                        new
                        {
                            OrderDetailId = 12,
                            OrderId = 8,
                            ProductId = 15,
                            Quantity = 3,
                            UnitPrice = 499.0
                        },
                        new
                        {
                            OrderDetailId = 13,
                            OrderId = 9,
                            ProductId = 2,
                            Quantity = 1,
                            UnitPrice = 8999.0
                        },
                        new
                        {
                            OrderDetailId = 14,
                            OrderId = 9,
                            ProductId = 6,
                            Quantity = 1,
                            UnitPrice = 1299.0
                        },
                        new
                        {
                            OrderDetailId = 15,
                            OrderId = 9,
                            ProductId = 14,
                            Quantity = 2,
                            UnitPrice = 799.0
                        },
                        new
                        {
                            OrderDetailId = 16,
                            OrderId = 10,
                            ProductId = 6,
                            Quantity = 1,
                            UnitPrice = 1299.0
                        });
                });

            modelBuilder.Entity("E_commerce_program.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Smartphone med 128GB lagring",
                            Name = "iPhone 13 Pro",
                            Price = 11999,
                            StockQuantity = 15,
                            SupplierId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "4K Smart TV med HDR",
                            Name = "Samsung TV 55\"",
                            Price = 8999,
                            StockQuantity = 8,
                            SupplierId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "Trådlösa hörlurar med brusreducering",
                            Name = "Sony WH-1000XM4",
                            Price = 3499,
                            StockQuantity = 7,
                            SupplierId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Description = "Laptop med M1-chip och 8GB RAM",
                            Name = "MacBook Air",
                            Price = 12499,
                            StockQuantity = 12,
                            SupplierId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Description = "Automatisk espressomaskin",
                            Name = "Espressomaskin",
                            Price = 4995,
                            StockQuantity = 6,
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Description = "Multifunktionell köksmaskin",
                            Name = "Matberedare",
                            Price = 1299,
                            StockQuantity = 20,
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            Description = "Varm jacka för vinterbruk",
                            Name = "Vinterjacka",
                            Price = 1999,
                            StockQuantity = 25,
                            SupplierId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 4,
                            Description = "Skor för långdistanslöpning",
                            Name = "Löparskor",
                            Price = 1499,
                            StockQuantity = 18,
                            SupplierId = 4
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 4,
                            Description = "Halkfri yogamatta",
                            Name = "Yogamatta",
                            Price = 349,
                            StockQuantity = 30,
                            SupplierId = 4
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 5,
                            Description = "Populär skönlitterär roman",
                            Name = "Bestsellerroman",
                            Price = 249,
                            StockQuantity = 40,
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 1,
                            Description = "Högpresterande dator för gaming",
                            Name = "Gaming PC",
                            Price = 18999,
                            StockQuantity = 5,
                            SupplierId = 6
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 1,
                            Description = "10\" surfplatta med WiFi",
                            Name = "Tablet",
                            Price = 4299,
                            StockQuantity = 9,
                            SupplierId = 5
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 1,
                            Description = "Portabel högtalare med 20h batteritid",
                            Name = "Bluetooth-högtalare",
                            Price = 899,
                            StockQuantity = 22,
                            SupplierId = 6
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 2,
                            Description = "Programmerbar kaffebryggare",
                            Name = "Kaffebryggare",
                            Price = 799,
                            StockQuantity = 14,
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 3,
                            Description = "Funktionströja för träning",
                            Name = "Träningströja",
                            Price = 499,
                            StockQuantity = 35,
                            SupplierId = 3
                        });
                });

            modelBuilder.Entity("E_commerce_program.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            ContactPerson = "Anna Lindberg",
                            Email = "anna@techvision.se",
                            Name = "TechVision AB",
                            Phone = "070-123-4567"
                        },
                        new
                        {
                            SupplierId = 2,
                            ContactPerson = "Johan Bergman",
                            Email = "johan@homestyle.se",
                            Name = "HomeStyle",
                            Phone = "073-234-5678"
                        },
                        new
                        {
                            SupplierId = 3,
                            ContactPerson = "Maria Ek",
                            Email = "maria@fashionfirst.se",
                            Name = "Fashion First",
                            Phone = "076-345-6789"
                        },
                        new
                        {
                            SupplierId = 4,
                            ContactPerson = "Erik Strand",
                            Email = "erik@sportmax.se",
                            Name = "SportMax",
                            Phone = "072-456-7890"
                        },
                        new
                        {
                            SupplierId = 5,
                            ContactPerson = "Karl Holm",
                            Email = "karl@nordicelec.se",
                            Name = "Nordic Electronics",
                            Phone = "070-567-8901"
                        },
                        new
                        {
                            SupplierId = 6,
                            ContactPerson = "Lisa Björk",
                            Email = "lisa@globalgadgets.se",
                            Name = "Global Gadgets",
                            Phone = "073-678-9012"
                        });
                });

            modelBuilder.Entity("E_commerce_program.Models.Order", b =>
                {
                    b.HasOne("E_commerce_program.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("E_commerce_program.Models.OrderDetail", b =>
                {
                    b.HasOne("E_commerce_program.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_commerce_program.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_commerce_program.Models.Product", b =>
                {
                    b.HasOne("E_commerce_program.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_commerce_program.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("E_commerce_program.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_commerce_program.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("E_commerce_program.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("E_commerce_program.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("E_commerce_program.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
